# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Hive
else:
    import _Hive

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Hive.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _Hive.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _Hive.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _Hive.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _Hive.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _Hive.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Hive.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Hive.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Hive.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Hive.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _Hive.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _Hive.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _Hive.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _Hive.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _Hive.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _Hive.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Hive.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Hive:
_Hive.SwigPyIterator_swigregister(SwigPyIterator)

class Logic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Logic:
            _self = None
        else:
            _self = self
        _Hive.Logic_swiginit(self, _Hive.new_Logic(_self, ))
    __swig_destroy__ = _Hive.delete_Logic

    def GetNextMove(self, currentGameState: "GameState", ownPlayerColor: "Hive::Color") -> "Hive::Move":
        return _Hive.Logic_GetNextMove(self, currentGameState, ownPlayerColor)
    def __disown__(self):
        self.this.disown()
        _Hive.disown_Logic(self)
        return weakref.proxy(self)

# Register Logic in _Hive:
_Hive.Logic_swigregister(Logic)

class HiveClient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, logic: "Logic"):
        _Hive.HiveClient_swiginit(self, _Hive.new_HiveClient(logic))

    def Start(self, argc: "int", argv: "char []") -> "void":
        return _Hive.HiveClient_Start(self, argc, argv)
    __swig_destroy__ = _Hive.delete_HiveClient

# Register HiveClient in _Hive:
_Hive.HiveClient_swigregister(HiveClient)

class TCP_Client(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Hive.TCP_Client_swiginit(self, _Hive.new_TCP_Client())

    def ConnectWithIP(self, ipAddress: "std::string", port: "unsigned short") -> "void":
        return _Hive.TCP_Client_ConnectWithIP(self, ipAddress, port)

    def Disconnect(self) -> "void":
        return _Hive.TCP_Client_Disconnect(self)

    def ResolveHostnameToIPAddress(self, hostname: "std::string") -> "std::string":
        return _Hive.TCP_Client_ResolveHostnameToIPAddress(self, hostname)

    def SendMessage(self, message: "std::string") -> "void":
        return _Hive.TCP_Client_SendMessage(self, message)

    def ReadMessage(self) -> "std::string":
        return _Hive.TCP_Client_ReadMessage(self)
    __swig_destroy__ = _Hive.delete_TCP_Client

# Register TCP_Client in _Hive:
_Hive.TCP_Client_swigregister(TCP_Client)

PieceType_QueenBee = _Hive.PieceType_QueenBee
PieceType_Spider = _Hive.PieceType_Spider
PieceType_Beetle = _Hive.PieceType_Beetle
PieceType_Grasshopper = _Hive.PieceType_Grasshopper
PieceType_Ant = _Hive.PieceType_Ant
PieceType_Obstacle = _Hive.PieceType_Obstacle
PieceType_Undefined = _Hive.PieceType_Undefined

def PieceTypeToString(type: "Hive::PieceType") -> "std::string":
    return _Hive.PieceTypeToString(type)

def PieceTypeFromString(pieceTypeAsString: "std::string") -> "Hive::PieceType":
    return _Hive.PieceTypeFromString(pieceTypeAsString)
MoveType_DeployMove = _Hive.MoveType_DeployMove
MoveType_DragMove = _Hive.MoveType_DragMove
MoveType_PassMove = _Hive.MoveType_PassMove
class AxialPosition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_Hive.AxialPosition_x_get, _Hive.AxialPosition_x_set)
    y = property(_Hive.AxialPosition_y_get, _Hive.AxialPosition_y_set)

    def __init__(self, *args):
        _Hive.AxialPosition_swiginit(self, _Hive.new_AxialPosition(*args))

    def __eq__(self, axialPosition: "AxialPosition") -> "bool":
        return _Hive.AxialPosition___eq__(self, axialPosition)

    def __ne__(self, axialPosition: "AxialPosition") -> "bool":
        return _Hive.AxialPosition___ne__(self, axialPosition)

    def GetHashValue(self) -> "int":
        return _Hive.AxialPosition_GetHashValue(self)

    def GetZCoordinate(self) -> "int":
        return _Hive.AxialPosition_GetZCoordinate(self)

    def GetDistanceTo(self, otherPosition: "AxialPosition") -> "int":
        return _Hive.AxialPosition_GetDistanceTo(self, otherPosition)

    def IsNeighbourTo(self, otherPosition: "AxialPosition") -> "bool":
        return _Hive.AxialPosition_IsNeighbourTo(self, otherPosition)

    def Add(self, otherPosition: "AxialPosition") -> "Hive::AxialPosition":
        return _Hive.AxialPosition_Add(self, otherPosition)

    def Subtract(self, otherPosition: "AxialPosition") -> "Hive::AxialPosition":
        return _Hive.AxialPosition_Subtract(self, otherPosition)

    def GetNeighbouringPositions(self) -> "std::vector< Hive::AxialPosition,std::allocator< Hive::AxialPosition > >":
        return _Hive.AxialPosition_GetNeighbouringPositions(self)

    def GetNeighbouringPositionsIncludingOutsideBoardPositions(self) -> "std::vector< Hive::AxialPosition,std::allocator< Hive::AxialPosition > >":
        return _Hive.AxialPosition_GetNeighbouringPositionsIncludingOutsideBoardPositions(self)

    def IsAtBorderOfBoard(self) -> "bool":
        return _Hive.AxialPosition_IsAtBorderOfBoard(self)

    def IsOnBoard(self) -> "bool":
        return _Hive.AxialPosition_IsOnBoard(self)

    def GetTranslationToOtherPosition(self, otherPosition: "AxialPosition") -> "Hive::AxialPosition":
        return _Hive.AxialPosition_GetTranslationToOtherPosition(self, otherPosition)
    __swig_destroy__ = _Hive.delete_AxialPosition

# Register AxialPosition in _Hive:
_Hive.AxialPosition_swigregister(AxialPosition)
cvar = _Hive.cvar
pieceTypeStrings = cvar.pieceTypeStrings

Color_Red = _Hive.Color_Red
Color_Blue = _Hive.Color_Blue
Color_Undefined = _Hive.Color_Undefined

def ColorToString(color: "Hive::Color") -> "std::string":
    return _Hive.ColorToString(color)

def ColorFromString(colorAsString: "std::string") -> "Hive::Color":
    return _Hive.ColorFromString(colorAsString)
class NeighbourMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Hive.NeighbourMap_swiginit(self, _Hive.new_NeighbourMap())

    def GetNeighbouringPositions(self, position: "AxialPosition") -> "std::vector< Hive::AxialPosition *,std::allocator< Hive::AxialPosition * > >":
        return _Hive.NeighbourMap_GetNeighbouringPositions(self, position)

    def GetNeighbouringPositionsRef(self, position: "AxialPosition") -> "std::vector< Hive::AxialPosition,std::allocator< Hive::AxialPosition > > &":
        return _Hive.NeighbourMap_GetNeighbouringPositionsRef(self, position)
    __swig_destroy__ = _Hive.delete_NeighbourMap

# Register NeighbourMap in _Hive:
_Hive.NeighbourMap_swigregister(NeighbourMap)
colorStrings = cvar.colorStrings

class Piece(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pieceType: "Hive::PieceType const &", pieceColor: "Hive::Color const &"):
        _Hive.Piece_swiginit(self, _Hive.new_Piece(pieceType, pieceColor))

    def GetType(self) -> "Hive::PieceType":
        return _Hive.Piece_GetType(self)

    def SetType(self, pieceType: "Hive::PieceType") -> "void":
        return _Hive.Piece_SetType(self, pieceType)

    def GetColor(self) -> "Hive::Color":
        return _Hive.Piece_GetColor(self)
    __swig_destroy__ = _Hive.delete_Piece

# Register Piece in _Hive:
_Hive.Piece_swigregister(Piece)

class Player(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Hive.Player_swiginit(self, _Hive.new_Player(*args))

    def GetColor(self) -> "Hive::Color":
        return _Hive.Player_GetColor(self)

    def SetColor(self, color: "Hive::Color") -> "void":
        return _Hive.Player_SetColor(self, color)

    def GetUndeployedPieces(self) -> "std::vector< Hive::Piece,std::allocator< Hive::Piece > > const &":
        return _Hive.Player_GetUndeployedPieces(self)

    def AddUndeployedPiece(self, piece: "Piece") -> "void":
        return _Hive.Player_AddUndeployedPiece(self, piece)

    def RemoveUndeployedPiece(self, type: "Hive::PieceType") -> "void":
        return _Hive.Player_RemoveUndeployedPiece(self, type)

    def InitializeUndeployedPieces(self) -> "void":
        return _Hive.Player_InitializeUndeployedPieces(self)
    __swig_destroy__ = _Hive.delete_Player

# Register Player in _Hive:
_Hive.Player_swigregister(Player)

class PieceStack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Hive.PieceStack_swiginit(self, _Hive.new_PieceStack(*args))

    def __eq__(self, pieceStack: "PieceStack") -> "bool":
        return _Hive.PieceStack___eq__(self, pieceStack)

    def IsStackEmpty(self) -> "bool &":
        return _Hive.PieceStack_IsStackEmpty(self)

    def GetAxialPosition(self) -> "Hive::AxialPosition const &":
        return _Hive.PieceStack_GetAxialPosition(self)

    def AddPieceOnTop(self, piece: "Piece") -> "void":
        return _Hive.PieceStack_AddPieceOnTop(self, piece)

    def RemovePieceOnTop(self) -> "void":
        return _Hive.PieceStack_RemovePieceOnTop(self)

    def GetPieceByLayer(self, layer: "int") -> "Hive::Piece &":
        return _Hive.PieceStack_GetPieceByLayer(self, layer)

    def GetPieceOnTop(self) -> "Hive::Piece &":
        return _Hive.PieceStack_GetPieceOnTop(self)

    def GetPieces(self) -> "std::vector< Hive::Piece,std::allocator< Hive::Piece > >":
        return _Hive.PieceStack_GetPieces(self)

    def SetPieces(self, pieces: "std::vector< Hive::Piece,std::allocator< Hive::Piece > >") -> "void":
        return _Hive.PieceStack_SetPieces(self, pieces)
    __swig_destroy__ = _Hive.delete_PieceStack

# Register PieceStack in _Hive:
_Hive.PieceStack_swigregister(PieceStack)

class Move(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Hive.Move_swiginit(self, _Hive.new_Move(*args))

    def GetMoveType(self) -> "Hive::MoveType":
        return _Hive.Move_GetMoveType(self)

    def GetColor(self) -> "Hive::Color":
        return _Hive.Move_GetColor(self)

    def GetMovedPieceType(self) -> "Hive::PieceType":
        return _Hive.Move_GetMovedPieceType(self)

    def GetStartPosition(self) -> "Hive::AxialPosition":
        return _Hive.Move_GetStartPosition(self)

    def GetDestinationPosition(self) -> "Hive::AxialPosition":
        return _Hive.Move_GetDestinationPosition(self)
    __swig_destroy__ = _Hive.delete_Move

# Register Move in _Hive:
_Hive.Move_swigregister(Move)

class Board(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Hive.Board_swiginit(self, _Hive.new_Board(*args))

    def PieceStackExists(self, *args) -> "bool":
        return _Hive.Board_PieceStackExists(self, *args)

    def GetPieceStack(self, *args) -> "Hive::PieceStack &":
        return _Hive.Board_GetPieceStack(self, *args)

    def GetPieceStackUnsafe(self, position: "AxialPosition") -> "Hive::PieceStack &":
        return _Hive.Board_GetPieceStackUnsafe(self, position)

    def GetPieceStacks(self) -> "std::vector< Hive::PieceStack *,std::allocator< Hive::PieceStack * > >":
        return _Hive.Board_GetPieceStacks(self)

    def GetPieceStacksWithoutObstacles(self) -> "std::vector< Hive::PieceStack *,std::allocator< Hive::PieceStack * > >":
        return _Hive.Board_GetPieceStacksWithoutObstacles(self)

    def GetPieceStacksByColor(self, color: "Hive::Color") -> "std::vector< Hive::PieceStack *,std::allocator< Hive::PieceStack * > >":
        return _Hive.Board_GetPieceStacksByColor(self, color)

    def GetPieceStacksByColorAndType(self, color: "Hive::Color", pieceType: "Hive::PieceType") -> "std::vector< Hive::PieceStack *,std::allocator< Hive::PieceStack * > >":
        return _Hive.Board_GetPieceStacksByColorAndType(self, color, pieceType)

    def GetPiece(self, *args) -> "Hive::Piece &":
        return _Hive.Board_GetPiece(self, *args)

    def GetNeighbouringPieceStacks(self, position: "AxialPosition") -> "std::vector< Hive::PieceStack *,std::allocator< Hive::PieceStack * > >":
        return _Hive.Board_GetNeighbouringPieceStacks(self, position)

    def GetNeighbouringPieceStacksExceptObstacles(self, position: "AxialPosition") -> "std::vector< Hive::PieceStack *,std::allocator< Hive::PieceStack * > >":
        return _Hive.Board_GetNeighbouringPieceStacksExceptObstacles(self, position)

    def GetEmptyNeighbouringAxialPositions(self, position: "AxialPosition") -> "std::vector< Hive::AxialPosition *,std::allocator< Hive::AxialPosition * > >":
        return _Hive.Board_GetEmptyNeighbouringAxialPositions(self, position)

    def GetEmptySlideableNeighbouringAxialPositions(self, position: "AxialPosition") -> "std::vector< Hive::AxialPosition *,std::allocator< Hive::AxialPosition * > >":
        return _Hive.Board_GetEmptySlideableNeighbouringAxialPositions(self, position)

    def GetEmptySlideableNeighbouringAxialPositionsExcept(self, position: "AxialPosition", ignoredPositions: "std::vector< Hive::AxialPosition,std::allocator< Hive::AxialPosition > > const &") -> "std::vector< Hive::AxialPosition *,std::allocator< Hive::AxialPosition * > >":
        return _Hive.Board_GetEmptySlideableNeighbouringAxialPositionsExcept(self, position, ignoredPositions)

    def AddPieceOnTop(self, piece: "Piece", position: "AxialPosition") -> "void":
        return _Hive.Board_AddPieceOnTop(self, piece, position)

    def RemoveUpmostPiece(self, position: "AxialPosition") -> "void":
        return _Hive.Board_RemoveUpmostPiece(self, position)

    def IsAxialPositionAtBorderOfBoard(self, position: "AxialPosition") -> "bool":
        return _Hive.Board_IsAxialPositionAtBorderOfBoard(self, position)

    def IsPositionOnBoard(self, *args) -> "bool":
        return _Hive.Board_IsPositionOnBoard(self, *args)

    def GetEmptyAxialPositionsOnBoard(self) -> "std::vector< Hive::AxialPosition,std::allocator< Hive::AxialPosition > >":
        return _Hive.Board_GetEmptyAxialPositionsOnBoard(self)

    def IsHiveCoherentIfPieceMovesFromPosition(self, position: "AxialPosition") -> "bool":
        return _Hive.Board_IsHiveCoherentIfPieceMovesFromPosition(self, position)

    def CanSlide(self, slideStartPos: "AxialPosition", slideEndPos: "AxialPosition") -> "bool":
        return _Hive.Board_CanSlide(self, slideStartPos, slideEndPos)

    def PlaceObstacles(self) -> "void":
        return _Hive.Board_PlaceObstacles(self)
    __swig_destroy__ = _Hive.delete_Board

# Register Board in _Hive:
_Hive.Board_swigregister(Board)

class GameState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Hive.GameState_swiginit(self, _Hive.new_GameState(*args))

    def GetTurn(self) -> "unsigned int":
        return _Hive.GameState_GetTurn(self)

    def SetTurn(self, turn: "unsigned int") -> "void":
        return _Hive.GameState_SetTurn(self, turn)

    def GetLastPerformedMove(self) -> "Hive::Move &":
        return _Hive.GameState_GetLastPerformedMove(self)

    def GetBoard(self) -> "Hive::Board &":
        return _Hive.GameState_GetBoard(self)

    def GetPlayer(self, color: "Hive::Color") -> "Hive::Player &":
        return _Hive.GameState_GetPlayer(self, color)

    def GetCurrentPlayer(self) -> "Hive::Player &":
        return _Hive.GameState_GetCurrentPlayer(self)

    def SetCurrentPlayer(self, player: "Player") -> "void":
        return _Hive.GameState_SetCurrentPlayer(self, player)

    def GetPausedPlayer(self) -> "Hive::Player &":
        return _Hive.GameState_GetPausedPlayer(self)

    def SetPausedPlayer(self, player: "Player") -> "void":
        return _Hive.GameState_SetPausedPlayer(self, player)

    def GetPossibleMoves(self) -> "std::vector< Hive::Move,std::allocator< Hive::Move > >":
        return _Hive.GameState_GetPossibleMoves(self)

    def PerformMove(self, move: "Move") -> "void":
        return _Hive.GameState_PerformMove(self, move)

    def GetPossibleDeployMoves(self) -> "std::vector< Hive::Move,std::allocator< Hive::Move > >":
        return _Hive.GameState_GetPossibleDeployMoves(self)

    def GetPossibleQueenBeeDeployMoves(self) -> "std::vector< Hive::Move,std::allocator< Hive::Move > >":
        return _Hive.GameState_GetPossibleQueenBeeDeployMoves(self)

    def GetPossibleDragMoves(self) -> "std::vector< Hive::Move,std::allocator< Hive::Move > >":
        return _Hive.GameState_GetPossibleDragMoves(self)

    def GetPossibleQueenBeeDragMoves(self) -> "std::vector< Hive::Move,std::allocator< Hive::Move > >":
        return _Hive.GameState_GetPossibleQueenBeeDragMoves(self)

    def GetPossibleSpiderDragMoves(self) -> "std::vector< Hive::Move,std::allocator< Hive::Move > >":
        return _Hive.GameState_GetPossibleSpiderDragMoves(self)

    def GetPossibleBeetleDragMoves(self) -> "std::vector< Hive::Move,std::allocator< Hive::Move > >":
        return _Hive.GameState_GetPossibleBeetleDragMoves(self)

    def GetPossibleGrasshopperDragMoves(self) -> "std::vector< Hive::Move,std::allocator< Hive::Move > >":
        return _Hive.GameState_GetPossibleGrasshopperDragMoves(self)

    def GetPossibleAntDragMoves(self) -> "std::vector< Hive::Move,std::allocator< Hive::Move > >":
        return _Hive.GameState_GetPossibleAntDragMoves(self)

    def IsGameOver(self) -> "bool":
        return _Hive.GameState_IsGameOver(self)
    __swig_destroy__ = _Hive.delete_GameState

# Register GameState in _Hive:
_Hive.GameState_swigregister(GameState)

SC_MessageType_Protocol = _Hive.SC_MessageType_Protocol
SC_MessageType_ProtocolEnd = _Hive.SC_MessageType_ProtocolEnd
SC_MessageType_Welcome = _Hive.SC_MessageType_Welcome
SC_MessageType_JoinRequest = _Hive.SC_MessageType_JoinRequest
SC_MessageType_JoinRequestPrepared = _Hive.SC_MessageType_JoinRequestPrepared
SC_MessageType_Joined = _Hive.SC_MessageType_Joined
SC_MessageType_GameState = _Hive.SC_MessageType_GameState
SC_MessageType_Move = _Hive.SC_MessageType_Move
SC_MessageType_MoveRequest = _Hive.SC_MessageType_MoveRequest
SC_MessageType_Left = _Hive.SC_MessageType_Left
SC_MessageType_Result = _Hive.SC_MessageType_Result
SC_MessageType_Error = _Hive.SC_MessageType_Error
class SC_Message(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Hive.SC_Message_swiginit(self, _Hive.new_SC_Message(*args))

    def GetContent(self) -> "std::string":
        return _Hive.SC_Message_GetContent(self)

    def GetMessageType(self) -> "SC_Communication::SC_MessageType":
        return _Hive.SC_Message_GetMessageType(self)
    __swig_destroy__ = _Hive.delete_SC_Message

# Register SC_Message in _Hive:
_Hive.SC_Message_swigregister(SC_Message)

class SC_MessageHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Hive.SC_MessageHandler_swiginit(self, _Hive.new_SC_MessageHandler())

    def SplitInputMessagesIntoValidSC_Messages(self, inputStream: "std::string") -> "std::vector< SC_Communication::SC_Message,std::allocator< SC_Communication::SC_Message > >":
        return _Hive.SC_MessageHandler_SplitInputMessagesIntoValidSC_Messages(self, inputStream)

    def CreateProtocolMessage(self) -> "SC_Communication::SC_Message":
        return _Hive.SC_MessageHandler_CreateProtocolMessage(self)

    def CreateProtocolEndMessage(self) -> "SC_Communication::SC_Message":
        return _Hive.SC_MessageHandler_CreateProtocolEndMessage(self)

    def CreateJoinRequestMessage(self) -> "SC_Communication::SC_Message":
        return _Hive.SC_MessageHandler_CreateJoinRequestMessage(self)

    def CreateJoinReservedRequestMessage(self, reservationCode: "std::string const &") -> "SC_Communication::SC_Message":
        return _Hive.SC_MessageHandler_CreateJoinReservedRequestMessage(self, reservationCode)

    def CreateMoveMessage(self, move: "Move", roomID: "std::string const &") -> "SC_Communication::SC_Message":
        return _Hive.SC_MessageHandler_CreateMoveMessage(self, move, roomID)

    def GetPlayerColorFromWelcomeMessage(self, message: "SC_Message") -> "Hive::Color":
        return _Hive.SC_MessageHandler_GetPlayerColorFromWelcomeMessage(self, message)

    def GetRoomIDFromJoinedMessage(self, message: "SC_Message") -> "std::string":
        return _Hive.SC_MessageHandler_GetRoomIDFromJoinedMessage(self, message)

    def GetGameStateFromGameStateMessage(self, message: "SC_Message") -> "Hive::GameState":
        return _Hive.SC_MessageHandler_GetGameStateFromGameStateMessage(self, message)
    __swig_destroy__ = _Hive.delete_SC_MessageHandler

# Register SC_MessageHandler in _Hive:
_Hive.SC_MessageHandler_swigregister(SC_MessageHandler)


def BenchmarkGetPossibleMoves(benchmarkingTimeInMs: "unsigned int") -> "void":
    return _Hive.BenchmarkGetPossibleMoves(benchmarkingTimeInMs)
class SC_Message_Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _Hive.SC_Message_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _Hive.SC_Message_Vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _Hive.SC_Message_Vector___bool__(self)

    def __len__(self) -> "std::vector< SC_Communication::SC_Message >::size_type":
        return _Hive.SC_Message_Vector___len__(self)

    def __getslice__(self, i: "std::vector< SC_Communication::SC_Message >::difference_type", j: "std::vector< SC_Communication::SC_Message >::difference_type") -> "std::vector< SC_Communication::SC_Message,std::allocator< SC_Communication::SC_Message > > *":
        return _Hive.SC_Message_Vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _Hive.SC_Message_Vector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< SC_Communication::SC_Message >::difference_type", j: "std::vector< SC_Communication::SC_Message >::difference_type") -> "void":
        return _Hive.SC_Message_Vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _Hive.SC_Message_Vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< SC_Communication::SC_Message >::value_type const &":
        return _Hive.SC_Message_Vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _Hive.SC_Message_Vector___setitem__(self, *args)

    def pop(self) -> "std::vector< SC_Communication::SC_Message >::value_type":
        return _Hive.SC_Message_Vector_pop(self)

    def append(self, x: "SC_Message") -> "void":
        return _Hive.SC_Message_Vector_append(self, x)

    def empty(self) -> "bool":
        return _Hive.SC_Message_Vector_empty(self)

    def size(self) -> "std::vector< SC_Communication::SC_Message >::size_type":
        return _Hive.SC_Message_Vector_size(self)

    def swap(self, v: "SC_Message_Vector") -> "void":
        return _Hive.SC_Message_Vector_swap(self, v)

    def begin(self) -> "std::vector< SC_Communication::SC_Message >::iterator":
        return _Hive.SC_Message_Vector_begin(self)

    def end(self) -> "std::vector< SC_Communication::SC_Message >::iterator":
        return _Hive.SC_Message_Vector_end(self)

    def rbegin(self) -> "std::vector< SC_Communication::SC_Message >::reverse_iterator":
        return _Hive.SC_Message_Vector_rbegin(self)

    def rend(self) -> "std::vector< SC_Communication::SC_Message >::reverse_iterator":
        return _Hive.SC_Message_Vector_rend(self)

    def clear(self) -> "void":
        return _Hive.SC_Message_Vector_clear(self)

    def get_allocator(self) -> "std::vector< SC_Communication::SC_Message >::allocator_type":
        return _Hive.SC_Message_Vector_get_allocator(self)

    def pop_back(self) -> "void":
        return _Hive.SC_Message_Vector_pop_back(self)

    def erase(self, *args) -> "std::vector< SC_Communication::SC_Message >::iterator":
        return _Hive.SC_Message_Vector_erase(self, *args)

    def __init__(self, *args):
        _Hive.SC_Message_Vector_swiginit(self, _Hive.new_SC_Message_Vector(*args))

    def push_back(self, x: "SC_Message") -> "void":
        return _Hive.SC_Message_Vector_push_back(self, x)

    def front(self) -> "std::vector< SC_Communication::SC_Message >::value_type const &":
        return _Hive.SC_Message_Vector_front(self)

    def back(self) -> "std::vector< SC_Communication::SC_Message >::value_type const &":
        return _Hive.SC_Message_Vector_back(self)

    def assign(self, n: "std::vector< SC_Communication::SC_Message >::size_type", x: "SC_Message") -> "void":
        return _Hive.SC_Message_Vector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _Hive.SC_Message_Vector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _Hive.SC_Message_Vector_insert(self, *args)

    def reserve(self, n: "std::vector< SC_Communication::SC_Message >::size_type") -> "void":
        return _Hive.SC_Message_Vector_reserve(self, n)

    def capacity(self) -> "std::vector< SC_Communication::SC_Message >::size_type":
        return _Hive.SC_Message_Vector_capacity(self)
    __swig_destroy__ = _Hive.delete_SC_Message_Vector

# Register SC_Message_Vector in _Hive:
_Hive.SC_Message_Vector_swigregister(SC_Message_Vector)

class Move_Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _Hive.Move_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _Hive.Move_Vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _Hive.Move_Vector___bool__(self)

    def __len__(self) -> "std::vector< Hive::Move >::size_type":
        return _Hive.Move_Vector___len__(self)

    def __getslice__(self, i: "std::vector< Hive::Move >::difference_type", j: "std::vector< Hive::Move >::difference_type") -> "std::vector< Hive::Move,std::allocator< Hive::Move > > *":
        return _Hive.Move_Vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _Hive.Move_Vector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Hive::Move >::difference_type", j: "std::vector< Hive::Move >::difference_type") -> "void":
        return _Hive.Move_Vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _Hive.Move_Vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Hive::Move >::value_type const &":
        return _Hive.Move_Vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _Hive.Move_Vector___setitem__(self, *args)

    def pop(self) -> "std::vector< Hive::Move >::value_type":
        return _Hive.Move_Vector_pop(self)

    def append(self, x: "Move") -> "void":
        return _Hive.Move_Vector_append(self, x)

    def empty(self) -> "bool":
        return _Hive.Move_Vector_empty(self)

    def size(self) -> "std::vector< Hive::Move >::size_type":
        return _Hive.Move_Vector_size(self)

    def swap(self, v: "Move_Vector") -> "void":
        return _Hive.Move_Vector_swap(self, v)

    def begin(self) -> "std::vector< Hive::Move >::iterator":
        return _Hive.Move_Vector_begin(self)

    def end(self) -> "std::vector< Hive::Move >::iterator":
        return _Hive.Move_Vector_end(self)

    def rbegin(self) -> "std::vector< Hive::Move >::reverse_iterator":
        return _Hive.Move_Vector_rbegin(self)

    def rend(self) -> "std::vector< Hive::Move >::reverse_iterator":
        return _Hive.Move_Vector_rend(self)

    def clear(self) -> "void":
        return _Hive.Move_Vector_clear(self)

    def get_allocator(self) -> "std::vector< Hive::Move >::allocator_type":
        return _Hive.Move_Vector_get_allocator(self)

    def pop_back(self) -> "void":
        return _Hive.Move_Vector_pop_back(self)

    def erase(self, *args) -> "std::vector< Hive::Move >::iterator":
        return _Hive.Move_Vector_erase(self, *args)

    def __init__(self, *args):
        _Hive.Move_Vector_swiginit(self, _Hive.new_Move_Vector(*args))

    def push_back(self, x: "Move") -> "void":
        return _Hive.Move_Vector_push_back(self, x)

    def front(self) -> "std::vector< Hive::Move >::value_type const &":
        return _Hive.Move_Vector_front(self)

    def back(self) -> "std::vector< Hive::Move >::value_type const &":
        return _Hive.Move_Vector_back(self)

    def assign(self, n: "std::vector< Hive::Move >::size_type", x: "Move") -> "void":
        return _Hive.Move_Vector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _Hive.Move_Vector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _Hive.Move_Vector_insert(self, *args)

    def reserve(self, n: "std::vector< Hive::Move >::size_type") -> "void":
        return _Hive.Move_Vector_reserve(self, n)

    def capacity(self) -> "std::vector< Hive::Move >::size_type":
        return _Hive.Move_Vector_capacity(self)
    __swig_destroy__ = _Hive.delete_Move_Vector

# Register Move_Vector in _Hive:
_Hive.Move_Vector_swigregister(Move_Vector)



